import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../domain/entities/menu_item_edit_entity.dart';

/// Individual size row with expandable details
class SizeRowWidget extends StatefulWidget {
  final SizeEditEntity size;
  final bool isExpanded;
  final VoidCallback onToggleExpand;
  final Function(SizeEditEntity) onUpdate;
  final VoidCallback onDelete;
  final List<AddOnCategoryEntity> availableAddOnCategories;

  const SizeRowWidget({
    super.key,
    required this.size,
    required this.isExpanded,
    required this.onToggleExpand,
    required this.onUpdate,
    required this.onDelete,
    required this.availableAddOnCategories,
  });

  @override
  State<SizeRowWidget> createState() => _SizeRowWidgetState();
}

class _SizeRowWidgetState extends State<SizeRowWidget> {
  late TextEditingController _nameController;
  late TextEditingController _posController;
  late TextEditingController _onlineController;
  late TextEditingController _deliveryController;

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.size.name);
    _posController = TextEditingController(
      text: widget.size.posPrice > 0 ? widget.size.posPrice.toStringAsFixed(2) : '',
    );
    _onlineController = TextEditingController(
      text: widget.size.onlinePrice > 0 ? widget.size.onlinePrice.toStringAsFixed(2) : '',
    );
    _deliveryController = TextEditingController(
      text: widget.size.deliveryPrice > 0 ? widget.size.deliveryPrice.toStringAsFixed(2) : '',
    );
  }

  @override
  void dispose() {
    _nameController.dispose();
    _posController.dispose();
    _onlineController.dispose();
    _deliveryController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: widget.isExpanded
              ? const Color(0xFF2196F3)
              : Colors.grey.shade300,
          width: widget.isExpanded ? 2 : 1,
        ),
      ),
      child: Column(
        children: [
          // Collapsed view
          InkWell(
            onTap: widget.onToggleExpand,
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  // Drag handle
                  Icon(
                    Icons.drag_indicator,
                    color: Colors.grey.shade400,
                    size: 20,
                  ),
                  const SizedBox(width: 12),

                  // Size name
                  Expanded(
                    flex: 2,
                    child: Text(
                      widget.size.name.isEmpty ? 'Unnamed Size' : widget.size.name,
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: widget.size.name.isEmpty
                            ? Colors.grey.shade400
                            : const Color(0xFF1F2937),
                      ),
                    ),
                  ),

                  // Price display
                  Expanded(
                    child: Text(
                      _getPriceDisplay(),
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey.shade600,
                      ),
                    ),
                  ),

                  // Add-ons count
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      color: Colors.blue.shade50,
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      '${widget.size.addOnCategoryIds.length} add-ons',
                      style: const TextStyle(
                        fontSize: 12,
                        color: Color(0xFF2196F3),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),

                  // Expand icon
                  Icon(
                    widget.isExpanded
                        ? Icons.expand_less
                        : Icons.expand_more,
                    color: Colors.grey.shade600,
                  ),

                  // Delete button
                  IconButton(
                    icon: Icon(
                      Icons.delete_outline,
                      color: Colors.grey.shade400,
                      size: 20,
                    ),
                    onPressed: widget.onDelete,
                    tooltip: 'Delete size',
                  ),
                ],
              ),
            ),
          ),

          // Expanded view
          if (widget.isExpanded) _buildExpandedView(),
        ],
      ),
    );
  }

  Widget _buildExpandedView() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        borderRadius: const BorderRadius.only(
          bottomLeft: Radius.circular(8),
          bottomRight: Radius.circular(8),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Size name
          _buildTextField(
            label: 'Size Name',
            controller: _nameController,
            hint: 'e.g., Small, Medium, Large',
            onChanged: (value) {
              widget.onUpdate(widget.size.copyWith(name: value));
            },
          ),
          const SizedBox(height: 16),

          // Pricing section
          const Text(
            'Pricing by Channel',
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: Color(0xFF1F2937),
            ),
          ),
          const SizedBox(height: 12),

          Row(
            children: [
              Expanded(
                child: _buildPriceField(
                  label: 'POS Price',
                  controller: _posController,
                  onChanged: (value) {
                    final price = double.tryParse(value) ?? 0.0;
                    widget.onUpdate(widget.size.copyWith(posPrice: price));
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildPriceField(
                  label: 'Online Price',
                  controller: _onlineController,
                  onChanged: (value) {
                    final price = double.tryParse(value) ?? 0.0;
                    widget.onUpdate(widget.size.copyWith(onlinePrice: price));
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: _buildPriceField(
                  label: 'Delivery Price',
                  controller: _deliveryController,
                  onChanged: (value) {
                    final price = double.tryParse(value) ?? 0.0;
                    widget.onUpdate(widget.size.copyWith(deliveryPrice: price));
                  },
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),

          // Add-ons section
          _buildAddOnsSection(),
        ],
      ),
    );
  }

  Widget _buildTextField({
    required String label,
    required TextEditingController controller,
    required String hint,
    required Function(String) onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            fontSize: 12,
            fontWeight: FontWeight.w600,
            color: Color(0xFF6B7280),
          ),
        ),
        const SizedBox(height: 4),
        TextField(
          controller: controller,
          onChanged: onChanged,
          decoration: InputDecoration(
            hintText: hint,
            filled: true,
            fillColor: Colors.white,
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 12,
              vertical: 8,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(6),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(6),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(6),
              borderSide: const BorderSide(color: Color(0xFF2196F3), width: 2),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPriceField({
    required String label,
    required TextEditingController controller,
    required Function(String) onChanged,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            fontSize: 12,
            fontWeight: FontWeight.w600,
            color: Color(0xFF6B7280),
          ),
        ),
        const SizedBox(height: 4),
        TextField(
          controller: controller,
          onChanged: onChanged,
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d+\.?\d{0,2}')),
          ],
          decoration: InputDecoration(
            prefixText: '\$',
            hintText: '0.00',
            filled: true,
            fillColor: Colors.white,
            contentPadding: const EdgeInsets.symmetric(
              horizontal: 12,
              vertical: 8,
            ),
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(6),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(6),
              borderSide: BorderSide(color: Colors.grey.shade300),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(6),
              borderSide: const BorderSide(color: Color(0xFF2196F3), width: 2),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildAddOnsSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          children: [
            const Text(
              'Add-on Categories',
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Color(0xFF1F2937),
              ),
            ),
            const Spacer(),
            TextButton.icon(
              onPressed: _showAddOnCategorySelector,
              icon: const Icon(Icons.add, size: 16),
              label: const Text('Manage'),
              style: TextButton.styleFrom(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        if (widget.size.addOnCategoryIds.isEmpty)
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(6),
              border: Border.all(color: Colors.grey.shade300),
            ),
            child: Row(
              children: [
                Icon(Icons.add_circle_outline, color: Colors.grey.shade400, size: 16),
                const SizedBox(width: 8),
                Text(
                  'No add-on categories assigned',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey.shade600,
                  ),
                ),
              ],
            ),
          )
        else
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: widget.size.addOnCategoryIds.map((categoryId) {
              final category = widget.availableAddOnCategories.firstWhere(
                (c) => c.id == categoryId,
                orElse: () => AddOnCategoryEntity(
                  id: categoryId,
                  name: 'Unknown',
                  items: [],
                ),
              );
              return Chip(
                label: Text(category.name),
                backgroundColor: Colors.white,
                side: BorderSide(color: Colors.grey.shade300),
                labelStyle: const TextStyle(fontSize: 12),
                deleteIcon: const Icon(Icons.close, size: 16),
                onDeleted: () {
                  final updatedIds = List<String>.from(widget.size.addOnCategoryIds)
                    ..remove(categoryId);
                  widget.onUpdate(
                    widget.size.copyWith(addOnCategoryIds: updatedIds),
                  );
                },
              );
            }).toList(),
          ),
      ],
    );
  }

  void _showAddOnCategorySelector() {
    showDialog(
      context: context,
      builder: (dialogContext) => _AddOnCategorySelectorDialog(
        currentCategoryIds: widget.size.addOnCategoryIds,
        availableCategories: widget.availableAddOnCategories,
        onSelectionChanged: (selectedIds) {
          widget.onUpdate(
            widget.size.copyWith(addOnCategoryIds: selectedIds),
          );
        },
      ),
    );
  }

  String _getPriceDisplay() {
    if (widget.size.posPrice > 0) {
      return '\$${widget.size.posPrice.toStringAsFixed(2)}';
    }
    return 'No price set';
  }
}

class _AddOnCategorySelectorDialog extends StatefulWidget {
  final List<String> currentCategoryIds;
  final List<AddOnCategoryEntity> availableCategories;
  final Function(List<String>) onSelectionChanged;

  const _AddOnCategorySelectorDialog({
    required this.currentCategoryIds,
    required this.availableCategories,
    required this.onSelectionChanged,
  });

  @override
  State<_AddOnCategorySelectorDialog> createState() =>
      _AddOnCategorySelectorDialogState();
}

class _AddOnCategorySelectorDialogState
    extends State<_AddOnCategorySelectorDialog> {
  late List<String> _selectedIds;
  String _searchQuery = '';

  @override
  void initState() {
    super.initState();
    _selectedIds = List.from(widget.currentCategoryIds);
  }

  @override
  Widget build(BuildContext context) {
    final filteredCategories = widget.availableCategories.where((category) {
      return category.name.toLowerCase().contains(_searchQuery.toLowerCase());
    }).toList();

    return AlertDialog(
      title: const Text('Manage Add-on Categories'),
      content: SizedBox(
        width: 500,
        height: 400,
        child: Column(
          children: [
            // Search field
            TextField(
              onChanged: (value) {
                setState(() {
                  _searchQuery = value;
                });
              },
              decoration: InputDecoration(
                hintText: 'Search categories...',
                prefixIcon: const Icon(Icons.search),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            ),
            const SizedBox(height: 16),

            // Category list
            Expanded(
              child: filteredCategories.isEmpty
                  ? Center(
                      child: Text(
                        'No categories found',
                        style: TextStyle(color: Colors.grey.shade600),
                      ),
                    )
                  : ListView.builder(
                      itemCount: filteredCategories.length,
                      itemBuilder: (context, index) {
                        final category = filteredCategories[index];
                        final isSelected = _selectedIds.contains(category.id);

                        return CheckboxListTile(
                          value: isSelected,
                          onChanged: (value) {
                            setState(() {
                              if (value == true) {
                                _selectedIds.add(category.id);
                              } else {
                                _selectedIds.remove(category.id);
                              }
                            });
                          },
                          title: Text(category.name),
                          subtitle: Text(
                            '${category.items.length} items',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.grey.shade600,
                            ),
                          ),
                        );
                      },
                    ),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: () {
            widget.onSelectionChanged(_selectedIds);
            Navigator.pop(context);
          },
          child: const Text('Apply'),
        ),
      ],
    );
  }
}
